from aiogram import F, Router
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback, get_user_locale
from pathlib import Path
import re

import app.database.requests as rq

import app.services.yougile_api as yg

import app.keyboards as kb
from app.database.requests import get_user_by_tg_id
from app.services.AttachmentSaver import AttachmentSaver

from bot import bot
from config import SAVE_PATH

router = Router()
attachment_saver = AttachmentSaver(bot)


class TaskAdding(StatesGroup):
    topic = State()
    title = State()
    description = State()
    extras = State()
    editing = State()
    deadline = State()
    image = State()
    document = State()


@router.message(F.text == "üìù–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task(message: Message, state=FSMContext):
    await state.set_state(TaskAdding.topic)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –∑–∞–¥–∞—á–∏:", reply_markup=kb.task_topics)

@router.message(TaskAdding.topic)
async def task_title(message: Message, state: FSMContext):
    await state.update_data(topic=message.text)
    await state.set_state(TaskAdding.title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

@router.message(TaskAdding.title)
async def task_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(TaskAdding.description)
    if (await state.get_data()).get('topic') == '–ü—Ä–æ–±–ª–µ–º—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ':
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ:\n1. –ü—Ä–æ–µ–∫—Ç\n2. –í–∏–¥\n3. id —ç–ª–µ–º–µ–Ω—Ç–∞\n4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—É—Ç–æ—á–Ω–µ–Ω–∏—è, —Å—Å—ã–ª–∫–∏)")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

@router.message(TaskAdding.description)
async def task_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(TaskAdding.extras)
    await message.answer(text="–í—Å–µ –≥–æ—Ç–æ–≤–æ?", reply_markup=kb.task_adding_tools)

@router.message(F.text == "‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", TaskAdding.extras)
async def task_edit(message: Message, state: FSMContext):
    current_description = (await state.get_data()).get('description')
    await message.answer(text=f'–í–æ—Ç —Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ):')
    await message.answer(text=f'{current_description}')
    await state.set_state(TaskAdding.editing)

@router.message(TaskAdding.editing)
async def task_editing(message: Message, state: FSMContext):
    new_description = message.text
    await state.update_data(description=new_description)
    await state.set_state(TaskAdding.extras)
    await message.answer('–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!', reply_markup=kb.task_adding_tools)

@router.message(F.text == "üïê–î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", TaskAdding.extras)
async def task_edit(message: Message, state: FSMContext):
    await message.answer(
        text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É',
        reply_markup=await SimpleCalendar(locale=await get_user_locale(message.from_user)).start_calendar())
    await state.set_state(TaskAdding.deadline)

@router.callback_query(TaskAdding.deadline, SimpleCalendarCallback.filter())
async def task_deadline(callback_query: CallbackQuery, callback_data: CallbackData, state: FSMContext):
    calendar = SimpleCalendar(
        locale=await get_user_locale(callback_query.from_user), show_alerts=False
    )
    selected, date = await calendar.process_selection(callback_query, callback_data)
    if selected:
        await callback_query.message.answer(f'–î–µ–¥–ª–∞–π–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {date.strftime("%d.%m.%Y")}',
                                            reply_markup=kb.task_adding_tools)
        await state.update_data(deadline=date.timestamp() * 1000 + 10 * 60 * 60 * 1000)
        await state.set_state(TaskAdding.extras)

@router.message(F.text == "üñº–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", TaskAdding.extras)
async def task_edit(message: Message, state: FSMContext):
    await state.set_state(TaskAdding.image)
    await message.answer(text="‚¨áÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É‚¨áÔ∏è")

@router.message(F.photo, TaskAdding.image)
async def task_image(message: Message, state: FSMContext):
    image = message.photo[-1]
    file_info = await bot.get_file(image.file_id)
    file_path = file_info.file_path

    # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—É—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    current_data = await state.get_data()
    current_data.setdefault('image_paths', []).append(file_path)
    await state.update_data(current_data)

    await state.set_state(TaskAdding.extras)
    await message.reply(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=kb.task_adding_tools)

@router.message(F.text == "üìÑ–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", TaskAdding.extras)
async def task_edit(message: Message, state: FSMContext):
    await state.set_state(TaskAdding.document)
    await message.answer(text="‚¨áÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç‚¨áÔ∏è")

@router.message(F.document, TaskAdding.document)
async def task_document(message: Message, state: FSMContext):
    document = message.document
    file_info = await bot.get_file(document.file_id)
    file_path = file_info.file_path

    # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—É—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    current_data = await state.get_data()
    current_data.setdefault('document_paths', []).append(file_path)
    await state.update_data(current_data)

    await state.set_state(TaskAdding.extras)
    await message.reply("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=kb.task_adding_tools)

@router.message(F.text == "‚úâÔ∏è–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", TaskAdding.extras)
async def task_extras(message: Message, state: FSMContext):
    data = await state.get_data()
    user = await get_user_by_tg_id(message.from_user.id)
    column_id = await rq.get_column(user.id)

    topic, title, description, deadline, images = (data.get("topic"), data.get('title'),
                                           data.get('description'), data.get('deadline'), data.get('images', []))

    # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É –≤ –Ω–∞—á–∞–ª–æ –æ–ø–∏—Å–∞–Ω–∏—è
    description = f"{topic}\n{description}"

    # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
    link_pattern = r"https?://(?:www\.)?[^\s/$.?#].[^\s]*"
    links = re.findall(link_pattern, description)
    for link in links:
        description = description.replace(link, f'<a href="{link}">{link}</a>')

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    attachment_folder = await attachment_saver.save(state)
    if attachment_folder:
        description += f"\n{attachment_folder}"

    # –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∏–∫–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    if message.from_user.username:
        description += f'\n<a href="https://t.me/{message.from_user.username}">@{message.from_user.username}</a>'
    else:
        description += f'\nTelegram: {message.from_user.first_name}'

    try:
        # –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ yougile
        new_task_id = await yg.set_task(title=title,
                                        description=description.replace('\n', '<br>'),
                                        column_id=column_id,
                                        deadline=deadline)
        # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∑–∞–¥–∞—á—É –≤ –±–¥
        await rq.set_task(user.id, title=title, description=description, task_id=new_task_id)
    except Exception as e:
        await message.answer(text="–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    await state.clear()
    await message.answer(text=f'–ó–∞–¥–∞—á–∞ "{title}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', reply_markup=kb.main)
